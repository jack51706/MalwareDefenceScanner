using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Text.RegularExpressions;
using SHDocVw; // reference to "Microsoft Internet Controls"
using MSHTML; // reference to "Mirosoft HTML Object Lirary"

namespace MalwareDefenceScanner
{
    class Program
    {
     
        // windows directory path
        static string windir = Environment.GetEnvironmentVariable("windir").ToLower();

        // program files directory path
        static string pfiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).ToLower();
 
        // check if path constains some of the Living Off The Land Binaries and Scripts objects
        // [will be updated in the next releases]
        // more datails about lolbas: https://lolbas-project.github.io/
        static string checkLolbas(string path)
        {
            string p = path.ToLower();
            if (p.StartsWith("cmd"))
            {
                return p;
            }
            if (p.StartsWith("rundll32") && p.Contains("javascript:"))
            {
                int cp = p.IndexOf(":");
                if (cp > -1)
                    return p.Substring(cp+1, p.Length - cp-1);
                else
                    return null;
            }
            else 
            if (p.StartsWith("rundll32"))
            {
                int cp1 = p.IndexOf(" ");
                int cp2 = p.IndexOf(",");

                if (cp1>-1 && cp2>-1)
                    return p.Substring(cp1,cp2-cp1);
                else
                    return null;
            }
            else
                return null;
        }


        // check if we should consder this file path suspected
        static bool isPathSuspected(string path)
        {
            string pathl = Environment.ExpandEnvironmentVariables(path).ToLower().Trim('\"');
            string ext = Path.GetExtension(pathl);

            // let's assume the path is not suspected if...
            if (ext.Equals("")) // ...it has no extension
                return false;
            else if (ext.Equals(".ini")) // ...it is an .ini file
                return false;
            else if (pathl.Contains(windir) || pathl.Contains(pfiles) ) // ...it is inside Program Files or Windows dirs
                return false;
            else
                return true;
        }

    
       

        // simple task scheduler scanning function
        static void tasksSearch(List<string> list)
        {
            // list all files in Tasks dir
            List<string> listXml = new List<string>();
            FileUtils.fileSearch(windir + @"\System32\Tasks", listXml);

            // iterate over the files
            foreach (string t in listXml)
            {
                try
                {
                    // load xml task file
                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.Load(t);

                    // search for command tag
                    XmlNodeList cmdList = xmlDoc.GetElementsByTagName("Command");
                    if (cmdList.Count > 0)
                    {
                        // add extracted path to the list
                        list.Add(cmdList[0].InnerText);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
        }


        // Checks any hash on VirusTotal using IE COM without using VT API
        static string vt(string hash)
        {
            try
            {
                // We can't use WebClient because VirusTotal websites executes some JavaScript
                // We are not using WebBrowser because it shows too many Javascript engine errors and VT just doesn't work with it

                // The solution is to create Ineternet Explorer object via COM
                InternetExplorer IEControl = new InternetExplorer();
                IWebBrowserApp ie = (IWebBrowserApp)IEControl;

                // make IE invisible
                ie.Visible = false;

                // navigate to virustotal for old browsers
                ie.Navigate("https://www.virustotal.com/old-browsers/file/" + hash);

                // wait for the page to download
                while (ie.Busy)
                {
                    System.Threading.Thread.Sleep(1000);

                }

                // get the HTML content
                IHTMLDocument2 doc = (IHTMLDocument2)ie.Document;
                string html = doc.body.innerHTML;

                // find information about detections
                Match m = Regex.Match(html, "<span id=\"detections\">(.*?)</span>");
                if (m.Length>0)
                    return m.Groups[1].ToString();
                else
                    return null;
            }
            catch(Exception e)
            {
                return null;
            }
        }
      
        static void Main(string[] args)
        {

       
            Console.ForegroundColor = ConsoleColor.White;

            ////////////////////////////////////////////
            // search in autostart filesystem locations
            ////////////////////////////////////////////
            Console.WriteLine("Searching in autostart filesystem locations...");
            List<string> list = new List<string>();
            string appDataDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            FileUtils.fileSearch(appDataDir + @"\Microsoft\Windows\Start Menu\Programs\Startup", list);
            FileUtils.fileSearch(@"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp", list);

            /////////////////////////////////////
            // search in selected registry hives
            /////////////////////////////////////            
            Console.WriteLine("Searching in registry...");
            RegistryUtils.regSearch(true, "Software\\Microsoft\\Windows\\CurrentVersion\\Run",null, list);
            RegistryUtils.regSearch(true, "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce",null, list);
            RegistryUtils.regSearch(true, "Environment", "UserInitMprLogonScript", list);

            //////////////////////////
            // search scheduled tasks
            //////////////////////////
            Console.WriteLine("Searching in scheduled tasks...");
            tasksSearch(list);
            
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"\r\nChecking  suspected objects");

            ///////////////////////////////////////
            // search for lolbas objects
            // send suspected hashes to VirusTotal 
            ///////////////////////////////////////
            foreach (string path in list)
            {
                //Console.ForegroundColor = ConsoleColor.Yellow;
               // Console.WriteLine($"\r\nChecking {path}");

                string lol = checkLolbas(path);
                if(lol!=null)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"Suspicious object detected: {path}");
                }
                else
                if (isPathSuspected(path))
                {

                    try
                    {
                        if (File.Exists(path))
                        {

                            Console.ForegroundColor = ConsoleColor.DarkGray;
                            Console.WriteLine($"\r\nSending hash of {path} to VirusTotal...");
                            string fileHash = FileUtils.getFileHash(path);
                            if (fileHash == null)
                            {
                                Console.ForegroundColor = ConsoleColor.White;
                                Console.WriteLine($"{path} - Error, can't access this file");
                                continue;
                            }
                            string detections = vt(fileHash);
                            if (detections != null)
                            {
                                Console.ForegroundColor = ConsoleColor.Red;
                                Console.WriteLine($"{path} - {detections} detections");
                            }
                            else
                            {
                                Console.ForegroundColor = ConsoleColor.White;
                                Console.WriteLine($"{path} - no detections but you should check this file manually");
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        Console.ForegroundColor = ConsoleColor.White;
                        Console.WriteLine($"{path} - Error");
                    }

                }
            }

            ////////////////////////////////////////////////////////
            // search for files in My Documents and Desktop folders
            ////////////////////////////////////////////////////////
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("\r\nSearching in user folders...");
            List<string> userFiles = new List<string>();
            FileUtils.fileSearch(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments).ToLower(), userFiles);
            FileUtils.fileSearch(Environment.GetFolderPath(Environment.SpecialFolder.Desktop).ToLower(), userFiles);

            //////////////////////////////////////////////
            // check if any of these files contain macros
            //////////////////////////////////////////////
            foreach (string dfile in userFiles)
            {
                try
                {
                    if (dfile.ToLower().EndsWith(".doc") || dfile.ToLower().EndsWith(".docm") ||
                    dfile.ToLower().EndsWith(".xls") || dfile.ToLower().EndsWith(".xlsm") ||
                    dfile.ToLower().EndsWith(".xlsb")
                    )
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.Write($"\r\nChecking if {dfile} contains macros... ");

                        if (OfficeUtils.containsMacro(dfile))
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Write(" YES");

                            //if there is a macro add this file to the list of suspected files
                            list.Add(dfile);
                        }
                        else
                        {
                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.Write(" NO");

                        }
                  
               
                    }
                }
                catch (Exception ex)
                {
                    
                }
            }

            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("\r\nDone. Press any key to exit");
            Console.Read();
          

        }
    }
}
