using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;
using Shell32; // reference to "Microsoft Shell Control And Automation" 

namespace MalwareDefenceScanner
{
    class FileUtils
    {
        // calculate file hash
        public static string getFileHash(string path)
        {
            try
            {
                MD5 hashGenerator = MD5.Create();
                byte[] b = File.ReadAllBytes(path);
                byte[] h = hashGenerator.ComputeHash(b);
                string hash = BitConverter.ToString(h).Replace("-", "");
                return hash;
            }
            catch (Exception e)
            {
                return null;
            }
        }


        // LNK parser function
        public static string getPathFromLnk(string lnkPath)
        {
            // create instance of Shell.Application COM           
            Type t = Type.GetTypeFromProgID("Shell.Application");
            dynamic shell = Activator.CreateInstance(t);

            // https://docs.microsoft.com/en-us/windows/win32/shell/nse-works
            // "Behind the scenes, every folder that Windows Explorer displays is represented by 
            // a Component Object Model(COM) object called a folder object.Each time the user interacts with 
            // a folder or its contents, the Shell communicates with the associated folder object through 
            // one of a number of standard interfaces."

            // get the folder object from LNK path
            Folder f = shell.NameSpace(System.IO.Path.GetDirectoryName(lnkPath));

            // get the folder item (LNK file)
            FolderItem fi = f.ParseName(System.IO.Path.GetFileName(lnkPath));

            if (fi != null)
            {
                // extract path from LNK file
                Shell32.ShellLinkObject link = (Shell32.ShellLinkObject)fi.GetLink;
                return link.Path;

            }
            else
                return null;

        }

        // find files in a directory and subdirs
        public static void fileSearch(string dir, List<string> list)
        {
            try
            {
                string[] files = Directory.GetFiles(dir);

                foreach (string f in files)
                {
                    if (f.EndsWith("lnk"))
                    {
                        list.Add(FileUtils.getPathFromLnk(f));

                    }
                    else
                        list.Add(f);
                }
            }
            catch (Exception e)
            {
                //Console.WriteLine(e.Message);
            }

            try
            {
                string[] dirs = Directory.GetDirectories(dir);
                foreach (string d in dirs)
                {
                    fileSearch(d, list);
                }
            }
            catch (Exception e) { }
        }
    }
}
